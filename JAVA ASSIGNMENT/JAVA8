# JAVA 8
Write an application to perform basic arithmetic operations like add, subtract, multiply and divide. You need to define a functional interface first.



public class Exp {
	public static void main(String[] args) {
		arthmetic mylambda= (int a,int b) ->a+b;
			System.out.println("Addition:"+(mylambda.foo(55,10)) );
			arthmetic mylambda1= (int a,int b) ->a-b;
			System.out.println("Subtraction:"+(mylambda1.foo(20, 60)));
			arthmetic mylambda2= (int a,int b) ->a*b;
			System.out.println("Multiplication:"+(mylambda2.foo(20, 99)));
			arthmetic mylambda3= (int a,int b) ->a/b;
			System.out.println("Division:"+(mylambda3.foo(39, 10)));
	}
  interface arthmetic{
    	  int foo(int a, int b);  
  } 
}



OUTPUT


Addition:65
Subtraction:-40
Multiplication:1980
Division:3



2.Write an application using lambda expressions to print Orders having 2 criteria implemented
Order price more than 10000
Order status is ACCEPTED or COMPLETED



import java.util.Scanner;

public class Expn {
	public static void main(String[] args)
	{
		
		order mylambda = (int a) -> {
			if(a >10000) 
				{
				System.out.println("Accepted"); 
				}
				else
				{
					System.out.println("Not Accepted");
				}
			return a;
		};
		System.out.println("order amount:" +(mylambda.foo(5000000)));
	}
     interface order
     {
    	 int foo(int a);
     }
}


output
Accepted
order amount:5000000



3.Use the functional interfaces Supplier, consumer, Predicate and Function to invoke built-in Methods from java API.

import java.util.ArrayList;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;

public class Expi {
public static void main(String[] args)
{
	//predicate
	Predicate<Integer>gt=a->(a>10);
	System.out.println("predicate:" + gt.test(20));
	//supplier
	String str="NIHARIKA!!";
	Supplier<Integer> supplier=()->str.length();
	System.out.println("Supplier:" +supplier.get());
	//Consumer
	Consumer<String>print=a->System.out.println("Consumer:"+a);
	print.accept("NIHARIKA");
}	
}	


OUTPUT
predicate:true
Supplier:10
Consumer:NIHARIKA



4.Remove the words that have odd lengths from the list. HINT : Use one of the new methods from JDK 8. Use remove() method from Collection interface


import java.util.ArrayList;
public class Exph {
	public static void main(String[] args)
	{
		ArrayList<String>words=new ArrayList<String>();
		words.add("ok");
		words.add("and");
		words.add("fun");
		words.add("in");
		words.add("not ok");
		words.add("justchill");
		words.removeIf(n->(n.length()%2!=0));
		for(String i:words)
		{
			System.out.println(i);
		}
	}

}


output
ok
in
not ok




5.Create a string that consists of the first letter of each word in the list of Strings provide. HINT : Use Consumer interface and a StringBulider to construct the results.


import java.util.ArrayList;
import java.util.function.Consumer;

public class Expa {
	public static void main(String[] args)
	{
		ArrayList<String>words=new ArrayList<String>();
		words.add("niharika");
		words.add("ok");
		words.add("think");
		words.add("and");
		words.add("now");
		words.add("think");
		words.add("sit");
		Consumer <String> print=(str)->System.out.println("the first letter of strings:"+str.charAt(0));
		words.forEach(print);
		
   }
}



output
the first letter of strings:n
the first letter of strings:o
the first letter of strings:t
the first letter of strings:a
the first letter of strings:n
the first letter of strings:t
the first letter of strings:s

6.Replace every word in the list with its upper case equivalent. Use replaceAll() method and UnaryOperator interface.


import java.util.ArrayList;
import java.util.function.UnaryOperator;
class Op implements UnaryOperator<String> {
   public String apply(String str) {
      return str.toUpperCase();
   }
}
public class Expr {
   public static void main(String[] args) throws CloneNotSupportedException {
      ArrayList<String> list = new ArrayList<>();
      list.add("stars");
      list.add("can't");
      list.add("shine");
      list.add("whithout");
      list.add("darkness");
      System.out.println("Contents of the list: "+list);
      list.replaceAll(new Op());
      System.out.println("Contents of the list after replace operation: \n"+list);
   }
}



out put
Contents of the list: [stars, can't, shine, whithout, darkness]
Contents of the list after replace operation: 
[STARS, CAN'T, SHINE, WHITHOUT, DARKNESS]




7.Convert every key-value pair of the map into a string and append them all into a single string, in iteration order. HINT : Use Map.entrySet() method & a StringBulider to construct the result String.


import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class Expik {
    public static void main(String[] cmd_lineParams) {
        Map<String, String> map = new HashMap<>(5);
        map.put("nani", "9");
        map.put("rohith", "3");
        map.put("gopalam", "7");
        map.put("naidu", "4");
        map.put("niharika", "5");
        String s = map.entrySet().stream().map((entry) ->
                        "" + entry.getKey() + " \"" + entry.getValue().replaceAll("\"", "\\\\\"") + "\"")
                .collect(Collectors.joining(" "));
        System.out.println(s);

    }
}


output

niharika "5" gopalam "7" naidu "4" nani "9" rohith "3"

8. Create a new thread that prints the numbers from the list. Use class Thread & interface Consumer.


import java.util.ArrayList;
import java.util.List;
public class Exp3 {

    public static void main(String[] args)
    {
    	
    		List<Integer> n=new ArrayList<Integer>()
    		{{
                add(14);
                add(59);
                add(89);
                add(90);
                add(57);
    		} };
            
            Thread mylambda = new Thread(()->System.out.println(n));
            mylambda.run();
    	}
    }
    
    output
    [14, 59, 89, 90, 57]
