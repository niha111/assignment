
2. EXAMPLE FOR INJECTING COLLECTIONS




package com.io.second;  
import java.util.Iterator;  
import java.util.List;  
  
public class Question {  
private int id;  
private String name;  
private List<String> answers_list;  
private Set<String> answers_set;  
private Map<Integer, String> answers_map;  
  
public int getId()
{
	return id;
}
public void setId()
{
	this.id = id;
}
public String getName()
{
	return name;
}
public void setName()
{
	this.name = name;
}
public ArrayList<Object>getList() 
{
	return answers_list;
}
public void setList(ArrayList<Object> answers_list) 
{
	this.answers_list = answers_list;
} 
public Set<Object>getSet() 
{
	return answers_set;
}
public void setSet(Set<Object> answers_set) 
{
	this.answers_set = answers_set;
} 
public Map<Integer, String>getMap() 
{
	return answers_map;
}
public void setList(Map<Integer, String> answer_map) 
{
	this.answers_map = answers_map;
} 

public void displayList(){  
    System.out.println(id+" "+name);  
    System.out.println("answers are:");  
    Iterator<String> itr=answers_list.iterator();  
    while(itr.hasNext()){  
        System.out.println(itr.next());  
    }  
}  

public void displaySet(){  
    System.out.println(id+" "+name);  
    System.out.println("answers are:");  
    Iterator<String> iter = answers_set.iterator();  
    while(iter.hasNext()){  
        System.out.println(iter.next());  
    }  
}  

public void displayMap()
{
	answers_map.forEach((key, value) -> System.out.println(id + ":" + answers_map));
}
  
}  
	```java
package io.second;  
  
import org.springframework.beans.factory.BeanFactory;  
import org.springframework.beans.factory.xml.XmlBeanFactory;  
import org.springframework.core.io.ClassPathResource;  
import org.springframework.core.io.Resource;  
  
public class Test {  
public static void main(String[] args) {  
    Resource r=new ClassPathResource("applicationContext.xml");  
    BeanFactory factory=new XmlBeanFactory(r);  
      
    Question q=(Question)factory.getBean("q");  
    q1.displayList(); 
    Question q1=(Question)factory.getBean("q1");  
    q1.displaySet(); 
    Question q2=(Question)factory.getBean("q2);  
    q1.displayMap();  
      
}  
}  	
<?xml version="1.0" encoding="UTF-8"?>  
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:p="http://www.springframework.org/schema/p"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">  
  
<bean id="q" class="io.second.Question">  
<property name="id" value="1"></property>  
<property name="name" value="What is Java?"></property>  
<property name="answers">  
<list>  
<value>Java is a programming language</value>  
<value>Java is a platform</value>  
<value>Java is an Island</value>  
</list>  
</property>  
</bean>  
	
<bean id="q1" class="io.second.Question">  
<property name="id" value="2"></property>  
<property name="name" value="Java is a platform"></property>  
<property name="answers">  
<list>  
<value>Java is a programming language</value>  
<value>Java is a platform</value>  
<value>Java is an Island</value>  
</list>  
</property>  
</bean>  
	
<bean id="q2" class="io.second.Question">  
<property name="id" value="3"></property>  
<property name="name" value="Java is an Island"></property>  
<property name="answers">  
<list>  
<value>Java is a programming language</value>  
<value>Java is a platform</value>  
<value>Java is an Island</value>  
</list>  
</property>  
</bean>  
  
</beans>
